--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fml.common.network.internal;
 
+import com.google.common.collect.Lists;
 import io.netty.channel.ChannelPipeline;
 import io.netty.channel.embedded.EmbeddedChannel;
 
@@ -33,9 +34,13 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.inventory.Container;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerList;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.common.util.FakePlayer;
 import net.minecraftforge.fml.common.FMLCommonHandler;
@@ -58,6 +63,12 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftInventory;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftInventoryView;
+import org.bukkit.event.inventory.InventoryType;
+import red.mohist.configuration.MohistConfig;
 
 import javax.annotation.Nullable;
 
@@ -88,6 +99,25 @@
             Container remoteGuiContainer = NetworkRegistry.INSTANCE.getRemoteGuiContainer(mc, entityPlayerMP, modGuiId, world, x, y, z);
             if (remoteGuiContainer != null)
             {
+                // Cauldron start - create bukkitView for passed container then fire open event.
+                if (remoteGuiContainer.getBukkitView() == null)
+                {
+                    TileEntity tileEntity = entityPlayer.world.getTileEntity(new BlockPos(x, y, z));
+                    if (tileEntity instanceof IInventory)
+                    {
+                        CraftInventory inventory = new CraftInventory((IInventory)tileEntity);
+                        remoteGuiContainer.setBukkitView(new CraftInventoryView(entityPlayer.getBukkitEntity(), inventory, remoteGuiContainer));
+                    }
+                    else
+                    {
+                        remoteGuiContainer.setBukkitView(new CraftInventoryView(entityPlayer.getBukkitEntity(), Bukkit.createInventory(entityPlayer.getBukkitEntity(), InventoryType.CHEST), remoteGuiContainer));
+                    }
+                }
+                remoteGuiContainer = CraftEventFactory.callInventoryOpenEvent((EntityPlayerMP) entityPlayer, remoteGuiContainer, false);
+                if (remoteGuiContainer == null) {
+                    return;
+                }
+                // Cauldron end
                 entityPlayerMP.getNextWindowId();
                 entityPlayerMP.closeContainer();
                 int windowId = entityPlayerMP.currentWindowId;
@@ -154,18 +184,27 @@
                 .filter(pair -> pair.getValue() != null)
                 .sorted(Comparator.comparing(o -> o.getKey().getName()))
                 .collect(Collectors.toList());
+        List<ModContainer> hackpacks = Lists.newArrayList();
+        List<String> rejectStrings = new ArrayList<>();
+        for (Pair<ModContainer, String> reject : rejects)
+        {
+            ModContainer modContainer = reject.getKey();
+            rejectStrings.add(modContainer.getName() + ": " + reject.getValue());
+            String name = reject.getKey().getName().toLowerCase() + reject.getKey().getModId().toLowerCase();
+            if(rejects.isEmpty() && (name.contains("cjb") || name.contains("kradxns") || name.contains("chestfinder") || name.contains("cheating") || name.contains("xray") || name.contains("radarbro") || name.contains("zyin"))) {
+                hackpacks.add(reject.getKey());
+            }
+        }
         if (rejects.isEmpty())
         {
+            if(!hackpacks.isEmpty()) {
+                FMLLog.info("[Mohist] Rejecting hacker %s: %s", side, hackpacks);
+                return String.format("Hack rejections %s",hackpacks);
+            }
             return null;
         }
         else
         {
-            List<String> rejectStrings = new ArrayList<>();
-            for (Pair<ModContainer, String> reject : rejects)
-            {
-                ModContainer modContainer = reject.getKey();
-                rejectStrings.add(modContainer.getName() + ": " + reject.getValue());
-            }
             String rejectString = String.join("\n", rejectStrings);
             FMLLog.log.info("Rejecting connection {}: {}", side, rejectString);
             return String.format("Server Mod rejections:\n%s", rejectString);
@@ -210,7 +249,7 @@
     public static void enhanceStatusQuery(JsonObject jsonobject)
     {
         JsonObject fmlData = new JsonObject();
-        fmlData.addProperty("type", "FML");
+        fmlData.addProperty("type", MohistConfig.instance.server_type.getValue());
         JsonArray modList = new JsonArray();
         for (ModContainer mc : Loader.instance().getActiveModList())
         {
